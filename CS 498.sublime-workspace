{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"write",
				"writeInstructionToStream"
			],
			[
				"op",
				"opType"
			],
			[
				"in",
				"instruct"
			],
			[
				"resu",
				"resultItem"
			],
			[
				"print",
				"printResultItem"
			],
			[
				"I",
				"INTEGER"
			],
			[
				"re",
				"resultItem"
			],
			[
				"CHEC",
				"CHECK_GREATER_THAN_EQUAL"
			],
			[
				"CH",
				"CHECK_LESS_THAN"
			],
			[
				"pr",
				"progBuf"
			],
			[
				"Get",
				"GetTypeAndAdvance"
			],
			[
				"AS",
				"AStack_Pop"
			],
			[
				"buf",
				"bufsize"
			],
			[
				"Byte",
				"ByteStream"
			],
			[
				"writ",
				"writeTypeToByteStream"
			],
			[
				"assemble",
				"assembleContext"
			],
			[
				"new",
				"new_context"
			],
			[
				"statem",
				"statementgroup"
			],
			[
				"MU",
				"MULTIPLY"
			],
			[
				"new_",
				"new_expression_children"
			],
			[
				"left",
				"leftExp"
			],
			[
				"right",
				"rightExp"
			],
			[
				"LOGICAL_",
				"LOGICAL_EQ"
			],
			[
				"tes",
				"testString"
			],
			[
				"compi",
				"compilationProcess"
			],
			[
				"build",
				"buildPath"
			],
			[
				"List",
				"List_Ref_Value"
			],
			[
				"assem",
				"assembleStatement"
			],
			[
				"st",
				"statements"
			],
			[
				"fact",
				"factor"
			],
			[
				"de",
				"definition"
			],
			[
				"no",
				"noCode"
			],
			[
				"yes",
				"yesCode"
			],
			[
				"ifs",
				"ifstmt"
			],
			[
				"Li",
				"List_Add_Value"
			],
			[
				"stmnt",
				"stmntgrp"
			],
			[
				"stateme",
				"statement"
			],
			[
				"statement",
				"statementgroup"
			],
			[
				"A",
				"AStack_Empty"
			],
			[
				"ASta",
				"AStack_Empty"
			],
			[
				"def",
				"define"
			],
			[
				"param",
				"paramCount"
			],
			[
				"GetParam",
				"getParamData"
			],
			[
				"_",
				"_variables"
			],
			[
				"l",
				"lVal"
			],
			[
				"if",
				"ifStmt"
			],
			[
				"C",
				"Code_Template"
			],
			[
				"Con",
				"Construct"
			],
			[
				"Lon",
				"LongestPalindrome"
			],
			[
				"u",
				"tmpUBound"
			],
			[
				"alp",
				"alphabet"
			],
			[
				"stat",
				"statesvisited"
			],
			[
				"ep",
				"epsilonClosures"
			],
			[
				"state",
				"stateCount"
			],
			[
				"epsion",
				"epsilonIndex"
			],
			[
				"cu",
				"currentSet"
			],
			[
				"alph",
				"alphabetLength"
			],
			[
				"return",
				"returnFromHere"
			],
			[
				"tmp",
				"tmpTransition"
			],
			[
				"SFAF",
				"SFAF_TRANSITIONS"
			],
			[
				"S",
				"SFAF_TRANSITIONS"
			],
			[
				"read",
				"readTransitions"
			],
			[
				"tok",
				"token"
			],
			[
				"TMO",
				"tmpTransition"
			],
			[
				"E",
				"ExtractIntFromToken"
			],
			[
				"src",
				"srcState"
			],
			[
				"TOKEN",
				"TOKENTYPE_IDENTIFIER"
			],
			[
				"TOK",
				"TOKENTYPE_OPEN_BRACE"
			],
			[
				"to",
				"tokens"
			],
			[
				"file",
				"fileContents"
			],
			[
				"ret",
				"_ret"
			],
			[
				"SFAF_s",
				"SFAF_SETTING_COUNT"
			],
			[
				"se",
				"settingsMap"
			],
			[
				"TO",
				"TOKENTYPE_OPEN_BRACE"
			],
			[
				"strn",
				"strncpy"
			],
			[
				"token",
				"tokens"
			],
			[
				"SFAF_",
				"SFAF_ALPHABET"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Compiler/Lexer_Parser/LangParse.y",
			"settings":
			{
				"buffer_size": 6715,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Compiler/Assembler/assembler.c",
			"settings":
			{
				"buffer_size": 5424,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Common/Instruction.h",
			"settings":
			{
				"buffer_size": 652,
				"line_ending": "Unix"
			}
		},
		{
			"file": "tests/If Tests/if test 2.lan",
			"settings":
			{
				"buffer_size": 102,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include \"interpreter.h\"\n\n#define GetTypeFromTarget(target, type)     *((type *) target)\n#define GetTypeAndAdvance(target, type)     GetTypeFromTarget(target, type); target += sizeof(type)\n\n#define GetInstruction(target)              GetTypeFromTarget(target, struct instruction)\n#define GetInstructionAndAdvance(target)    GetTypeAndAdvance(target, struct instruction)\n\n#define GetParameter(target)                GetTypeFromTarget(target, struct paramOption)\n#define GetParameterAndAdvance(target)      GetTypeAndAdvance(target, struct paramOption)\n\n#define GetParamData(target, source, size)          memcpy(target, source, (size))\n#define GetParamDataAndAdvance(target, source, size)    GetParamData(target,source,(size)); source += (size)\n\n#define GetTarget(location, ptr) ((location == 0)? (void *)&registers[location - 1] : (void *)ptr)\n\n#define PopComputationalStackItem() AStack_Top(computationalStack, holder, struct computationalStackItem); AStack_Pop(computationalStack)\n#define GetItemValue(item)	((item.type == INTEGER)? item.value.l:(item.type == FLOAT)? item.value.dbl: 0)\n\n#define ADD(a,b) a + b\n#define SUB(a,b) a - b\n#define MUL(a,b) a * b\n#define DIV(a,b) a / b\n#define MOD(a,b) (long)(a) % (long)(b)\n#define POW(a,b) pow((double) a, (double) b)\n\n#define CHECK_LESS_THAN(a,b) a < b\n#define CHECK_LESS_THAN_EQUAL(a,b) a <= b\n#define CHECK_GREATER_THAN(a,b) a > b\n#define CHECK_GREATER_THAN_EQUAL(a,b) a >= b\n\n#define BasicArithmeticOperation(op) {\\\n	assert(computationalStack.top >= 1);\\\n	struct computationalStackItem i1 = PopComputationalStackItem();\\\n	struct computationalStackItem i2 = PopComputationalStackItem();\\\n	if(i1.type == FLOAT || i2.type == FLOAT){\\\n		resultItem.value.dbl = op(GetItemValue(i2), GetItemValue(i1));\\\n		resultItem.type = FLOAT;\\\n	}\\\n	else{\\\n		resultItem.value.l = op(GetItemValue(i2), GetItemValue(i1));\\\n		resultItem.type = INTEGER;\\\n	}\\\n	AStack_Push(computationalStack, resultItem, struct computationalStackItem);\\\n	break;\\\n}\n\nunion data {\n	double dbl;\n	long l;\n	char byte;\n	char *ptr;\n	char rawData[8];\n};\n\nstruct computationalStackItem{\n	union data value;\n	enum datasource type;\n};\nstruct computationalStackItem holder;\n\nvoid printResultItem(struct computationalStackItem item){\n	switch(item.type){\n\n		case INTEGER:\n			printf(\"Integer Value = %ld\\n\", item.value.l);\n			break;\n		case FLOAT:\n			printf(\"Float Value = %lf\\n\", item.value.dbl);\n			break;\n		default:\n			printf(\"item type is unknown\\n\");\n			break;\n\n	}\n}\n\n\nvoid interpreteByteCode(char *buf, int length)\n{\n	char *progBuf = buf;\n	char *stop = progBuf + length;\n	struct instruction instruct;\n	struct paramOption options[3];\n	union data params[3];\n	union data registers [__REGISTER_COUNT];\n	struct astack computationalStack;\n	struct computationalStackItem stackItems[3];\n	struct computationalStackItem item;\n	struct computationalStackItem resultItem;\n	int i;\n	int paramCount;\n	long offset;\n\n	initAStack(computationalStack, struct computationalStackItem);\n\n	while (progBuf < stop) {\n		/*get instruction info*/\n		instruct = GetInstructionAndAdvance(progBuf);\n		switch(instruct.opType){\n			case iJMP:\n				offset = GetTypeAndAdvance(progBuf, long);\n				progBuf += offset;\n				break;\n			case iADD:\n				BasicArithmeticOperation(ADD);\n				break;\n			case iSUB:\n				BasicArithmeticOperation(SUB);\n				break;\n			case iMUL:\n				BasicArithmeticOperation(MUL);\n				break;\n			case iDIV:\n				BasicArithmeticOperation(DIV);\n				break;\n			case iMOD:\n				BasicArithmeticOperation(MOD);\n				break;\n			case iPOW:\n				BasicArithmeticOperation(POW);\n				break;\n			case iEQ:{\n					assert(computationalStack.top >= 1);\n					struct computationalStackItem i1 = PopComputationalStackItem();\n					struct computationalStackItem i2 = PopComputationalStackItem();\n					resultItem.value.l = memcmp(&i1, &i2, sizeof(union data)) == 0;\n					resultItem.type = INTEGER;\n					AStack_Push(computationalStack, resultItem, struct computationalStackItem);\n				}\n				break;\n			case iNEQ:{\n					assert(computationalStack.top >= 1);\n					struct computationalStackItem i1 = PopComputationalStackItem();\n					struct computationalStackItem i2 = PopComputationalStackItem();\n					resultItem.value.l = memcmp(&i1, &i2, sizeof(union data)) != 0;\n					resultItem.type = INTEGER;\n					AStack_Push(computationalStack, resultItem, struct computationalStackItem);\n				}\n				break;\n			case iLT:\n				BasicArithmeticOperation(CHECK_LESS_THAN);\n				break;\n			case iLTE:\n				BasicArithmeticOperation(CHECK_LESS_THAN_EQUAL);\n				break;\n			case iGT:\n				BasicArithmeticOperation(CHECK_GREATER_THAN);\n				break;\n			case iGTE:\n				BasicArithmeticOperation(CHECK_GREATER_THAN_EQUAL);\n				break;\n\n			case iPRINT:\n				item = PopComputationalStackItem();\n				switch(item.type){\n					case INTEGER:\n						printf(\"type: Integer, value: %ld\\n\", item.value.l);\n						break;\n					case FLOAT:\n						printf(\"type: Float, value: %lf\\n\", item.value.dbl);\n						break;\n					default:\n						printf(\"Not how to tell you this but...\\n\");\n						break;\n				}\n				break;\n			case iIPUSH:\n				resultItem.type = INTEGER;\n				resultItem.value.l = GetTypeAndAdvance(progBuf, long);\n				AStack_Push(computationalStack, resultItem, struct computationalStackItem);\n				break;\n			case iFPUSH:\n				resultItem.type = FLOAT;\n				resultItem.value.dbl = GetTypeAndAdvance(progBuf, double);\n				AStack_Push(computationalStack, resultItem, struct computationalStackItem);\n				break;\n			case iHELLO:\n				printf(\"Hello First Instruct\\n\");\n				break;\n			case iJMPF:\n				item = PopComputationalStackItem();\n				offset = GetTypeAndAdvance(progBuf, long);\n				if(!item.value.l){\n					progBuf += offset;\n				}\n				break;\n			case iJMPT:\n				item = PopComputationalStackItem();\n				offset = GetTypeAndAdvance(progBuf, long);\n				if(item.value.l){\n					progBuf += offset;\n				}\n				break;\n				iVPUSH,\n	iVPOP,\n			case iVPUSH:\n				item = PopComputationalStackItem();\n				offset = GetTypeAndAdvance(progBuf, long);\n				if(item.value.l){\n					progBuf += offset;\n				}\n				break;\n\n			case iJMPT:\n				item = PopComputationalStackItem();\n				offset = GetTypeAndAdvance(progBuf, long);\n				if(item.value.l){\n					progBuf += offset;\n				}\n				break;\n			default:\n				printf(\"OP NOT SUPPORTED!\\n\");\n				break;\n		}\n\n	}\n}",
			"file": "Interpreter/interpreter.c",
			"file_size": 5852,
			"file_write_time": 130406089360000000,
			"settings":
			{
				"buffer_size": 6204,
				"line_ending": "Unix"
			}
		},
		{
			"file": "CS 498.sublime-project",
			"settings":
			{
				"buffer_size": 2918,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Common/CByteStream/ByteStream.c",
			"settings":
			{
				"buffer_size": 1194,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Compiler/Lexer_Parser/LangLexer.l",
			"settings":
			{
				"buffer_size": 6064,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Debug Build",
	"command_palette":
	{
		"height": 347.0,
		"selected_items":
		[
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Remove Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"package control in",
				"Package Control: Install Package"
			],
			[
				"",
				"Package Control: Install Package"
			]
		],
		"width": 442.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/Joey/Desktop/School/CS 498/Common/Instruction.c",
		"/Users/Joey/Desktop/School/CS 498/Compiler/Common/program.h",
		"/Users/Joey/Desktop/School/CS 498/Common/CByteStream/ByteStream.h",
		"/Users/Joey/Desktop/School/CS 498/Common/Instruction.h",
		"/Users/Joey/Desktop/cs-498-capstone/tests/If Tests/if test 4.lan",
		"/Users/Joey/Desktop/cs-498-capstone/tests/If Tests/if test 0.lan",
		"/Users/Joey/Desktop/cs-498-capstone/tests/If Tests/if test 3.lan",
		"/Users/Joey/Desktop/cs-498-capstone/tests/If Tests/if test 2.lan",
		"/Users/Joey/Desktop/cs-498-capstone/tests/If Tests/if test 1.lan",
		"/Users/Joey/Desktop/cs-498-capstone/tests/General.py",
		"/Users/Joey/Desktop/cs-498-capstone/tests/CoreTest.py",
		"/Users/Joey/Desktop/cs-498-capstone/Compiler/parseTest.c",
		"/Users/Joey/Desktop/cs-498-capstone/Common/enumDefs.h",
		"/Users/Joey/Desktop/cs-498-capstone/Compiler/Common/program.c",
		"/Users/Joey/Desktop/cs-498-capstone/tests/SymbolTests_ParserOutput.txt",
		"/Users/Joey/Desktop/cs-498-capstone/Compiler/Assembler/assembler.c",
		"/Users/Joey/Desktop/cs-498-capstone/tests/print addition test.lan",
		"/Users/Joey/Desktop/cs-498-capstone/Compiler/Lexer_Parser/token.h",
		"/Users/Joey/Desktop/cs-498-capstone/Compiler/Lexer_Parser/LangParse.y",
		"/Users/Joey/Desktop/cs-498-capstone/Compiler/Lexer_Parser/LangParse.out",
		"/Users/Joey/Desktop/cs-498-capstone/Compiler/Lexer_Parser/LangParse.h",
		"/Users/Joey/Desktop/cs-498-capstone/Compiler/Lexer_Parser/LangParse.c",
		"/Users/Joey/Desktop/cs-498-capstone/Compiler/Lexer_Parser/LangLexer.l",
		"/Users/Joey/Desktop/cs-498-capstone/build/Compiler/lemon",
		"/Users/Joey/Desktop/cs-498-capstone/Compiler/Lexer_Parser/token.c",
		"/Users/Joey/Desktop/cs-498-capstone/Compiler/Common/program.h",
		"/home/joe/Desktop/School/CS 498/Common/Instruction.c",
		"/home/joe/Desktop/School/CS 498/tests/addition test.lan",
		"/home/joe/Desktop/School/CS 498/Compiler/Lexer_Parser/LangParse.c",
		"/home/joe/Desktop/School/CS 498/CS 498.sublime-project",
		"/home/joe/Desktop/School/CS 498/Common/astackTest.c",
		"/home/joe/Desktop/School/CS 498/Common/astack.h",
		"/home/joe/Desktop/School/CS 498/Compiler/compiler.c",
		"/home/joe/Desktop/School/CS 498/Style.sublime-settings",
		"/home/joe/Desktop/School/CS 498/Compiler/assembler.h",
		"/home/joe/Desktop/School/CS 498/Compiler/assembler.c",
		"/Users/Joey/Desktop/School/CS 498/CS 498.sublime-project",
		"/Users/Joey/Desktop/School/CS 498/Compiler/wscript",
		"/Users/Joey/Desktop/School/CS 498/Common/astackTest.c",
		"/Users/Joey/Desktop/School/CS 498/Interpreter/interpreter.c",
		"/Users/Joey/Desktop/School/CS 498/Compiler/compiler.c",
		"/Users/Joey/Desktop/School/CS 498/Compiler/compiler.h",
		"/Users/Joey/Desktop/School/CS 498/Compiler/LangLexer.l",
		"/Users/Joey/Desktop/School/CS 498/wscript",
		"/Users/Joey/Desktop/School/CS 498/Common/wscript",
		"/Users/Joey/Desktop/School/CS 498/Compiler/CompilerMain.c",
		"/Users/Joey/Desktop/School/CS 498/Compiler/compilerTest.c",
		"/Users/Joey/Desktop/School/CS 498/Interpreter/wscript",
		"/Users/Joey/Desktop/School/CS 498/Interpreter/interpreter.h",
		"/Users/Joey/Desktop/School/CS 498/Compiler/LangParse.c",
		"/Users/Joey/Desktop/School/CS 498/Compiler/LangParse.y",
		"/Volumes/Data/home/home/joe/Documents/science fair/url.txt",
		"/Users/Joey/Desktop/School/MAT 450/Notes.tex",
		"/Users/Joey/Library/Application Support/Sublime Text 3/Packages/User/waf.sublime-build",
		"/Users/Joey/Desktop/Desktop/stuff/start.bat",
		"/Users/Joey/Desktop/Desktop/stuff/New Text Document.txt",
		"/Users/Joey/Desktop/School/COM 308/Informal 2/Informal2.tex",
		"/Users/Joey/Desktop/COM 308/Informal 2/wscript",
		"/Users/Joey/Desktop/COM 308/Informal 2/Informal2.tex",
		"/Users/Joey/Desktop/COM 308/wscript",
		"/Users/Joey/Desktop/Desktop/Compiler.txt",
		"/Users/Joey/Desktop/CS 370/fake it response.txt",
		"/Volumes/Data/Joey/Desktop/old desktop/sdgwireless.txt",
		"/Volumes/Data/Joey/Desktop/old desktop/rackspace.txt",
		"/Volumes/Data/joey-2/Desktop/assignment1.c",
		"/Volumes/Data/joey-2/sketchbook/photo_resistor/photo_resistor.pde",
		"/Volumes/Data/bsod/bluescreenview/readme.txt",
		"/Volumes/Data/thumbdrive lion/sig.txt",
		"/Users/Joey/Downloads/waf-tests-0.1.0/wscript",
		"/Users/Joey/Desktop/fake it response",
		"/Users/Joey/Downloads/assign18.tex",
		"/Users/Joey/Documents/School/cs-480/Assignment 8/token.h",
		"/Users/Joey/Documents/School/cs-480/Assignment 8/expression.h",
		"/Users/Joey/Documents/School/cs-480/Assignment 8/basic.h",
		"/Users/Joey/Documents/School/cs-480/Assignment 8/expression.c",
		"/Users/Joey/Documents/School/cs-480/Assignment 8/basic.y",
		"/Users/Joey/Desktop/Compiler.txt",
		"/Users/Joey/Desktop/Snippets/Bash/deleteEmptyDirs.sh",
		"/Users/Joey/Desktop/Visilego/Config/Initialize.sh",
		"/Users/Joey/Desktop/cs480/Assignment 7/test.basic",
		"/Users/Joey/Desktop/New Folder With Items/school/cs-480/tiny basic reference.txt",
		"/Volumes/Data/Joey/Desktop/old desktop/get first int.sql",
		"/Users/Joey/Desktop/ais tictactoe/backup/tic.h2",
		"/Users/Joey/Desktop/AIS/rewrite/C/fact_exp/fact_exp.c",
		"/Users/Joey/Desktop/AIS/java calculator/tmp",
		"/Users/Joey/Documents/Mathletics/Solutions/wscript",
		"/Users/Joey/Documents/Mathletics/Solutions/October 2013/wscript",
		"/Users/Joey/Desktop/visilego tests",
		"/Users/Joey/Desktop/New Folder With Items/school/cs-480/Assignment 5/basic.lex",
		"/Users/Joey/Desktop/New Folder With Items/school/cs-480/Assignment 5/basic.y",
		"/Users/Joey/Downloads/cudaminer-2013-11-01/cudaminer-src-2013.11.01/compile",
		"/Users/Joey/Desktop/projects/newegg/newegg.e4p",
		"/Users/Joey/Desktop/projects/encdec/test.py",
		"/Users/Joey/Desktop/projects/encdec/encdec.py",
		"/Users/Joey/Desktop/School/CS 431/CS 431/fibonacci.hs",
		"/Users/Joey/Desktop/New Folder With Items/school/cs-480/Assignment 4/token.h",
		"/Users/Joey/Desktop/New Folder With Items/school/cs-480/Assignment 4/calc.lex",
		"/Users/Joey/Desktop/New Folder With Items/school/cs-480/Assignment 4/calc.y",
		"/Users/Joey/Desktop/New Folder With Items/school/cs-480/Assignment 4/calc.h",
		"/Users/Joey/Desktop/Chapter6problems.py",
		"/Volumes/Macintosh HD old/Users/Joey/cuda-workspace/async/src/asyncAPI.cu",
		"/Volumes/Macintosh HD old/Users/Joey/Desktop/projects/Mini Projects/Pumpkin/Pumpkin.ino",
		"/Users/Joey/Desktop/New Folder With Items/school/cs-480/src-10-30/calc/token.h",
		"/Users/Joey/Desktop/New Folder With Items/school/cs-480/src-10-30/calc/calc.y",
		"/Users/Joey/Desktop/New Folder With Items/school/cs-480/src-10-30/calc/calc.lex",
		"/Users/Joey/Desktop/New Folder With Items/school/cs-480/src-10-28/cgram.y",
		"/Users/Joey/Documents/workspace/vehilcetracker/html/index.html",
		"/Users/Joey/Documents/workspace/vehilcetracker/js/PageSetup.js",
		"/Users/Joey/Desktop/Visilego/src/edu/sunyit/cs370/vislego/guiPrototype/Controller.java",
		"/Users/Joey/Desktop/Visilego/src/edu/sunyit/cs370/vislego/guiPrototype/Controller.java-original",
		"/Users/Joey/Desktop/Visilego/src/edu/sunyit/cs370/vislego/guiPrototype/Controller.java-baseline",
		"/Users/Joey/Desktop/Visilego/src/edu/sunyit/cs370/vislego/guiPrototype/Controller.java-merge",
		"/Users/Joey/Desktop/Visilego/SConstruct",
		"/Users/Joey/Desktop/visilego todo.txt",
		"/Users/Joey/Downloads/GitHub.wdgt/main.js",
		"/Users/Joey/Desktop/New Folder With Items/school/cs-480/Assignment 3/test.basic",
		"/Users/Joey/Desktop/New Folder With Items/school/cs-480/Assignment 3/basic.lex",
		"/Users/Joey/Desktop/school/cs-480/src-10-23/cgram.y",
		"/Users/Joey/Desktop/school/cs-480/src-10-23/cgram.c",
		"/Users/Joey/Desktop/school/cs370/src-10-23/cgram.y",
		"/Users/Joey/Desktop/school/cs-480/src-10-23/lempar.c",
		"/Users/Joey/Documents/Personal Projects/PaycheckRecords-Python/README.md",
		"/Users/Joey/Desktop/failedtest.nxc",
		"/Users/Joey/Desktop/Visilego/Example NXC programs/text.nxc",
		"/Users/Joey/Desktop/Dump.sql",
		"/Users/Joey/Desktop/CS480/Assignment 2/main.cpp",
		"/Users/Joey/Desktop/CS480/Assignment 2/lexer.h",
		"/Users/Joey/Desktop/CS480/Assignment 2/sfaf.h"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"new_complete_instruction",
			"getParamCountForInstruction",
			"in ",
			"LOGICAL",
			"asdf",
			", ",
			"void ",
			"struct [a-zA-Z]*\\{",
			"shell",
			"With",
			"parse\\(",
			"parse",
			"center",
			"Config.db",
			"cout",
			"relop ::=",
			"olivegreen",
			"([\"October 2013\"])",
			"\"[a-z]*\"\\t",
			";}",
			"if(!inBlockComment){ ",
			"#define ParseARG_PDECL",
			"void parse",
			"parse",
			"tmpTransition.",
			".",
			"_tmpTransitions",
			"_tmpStruct",
			"strncmp",
			"LOOPEXIT",
			"finger"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			";",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Compiler/Lexer_Parser/LangParse.y",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6715,
						"regions":
						{
						},
						"selection":
						[
							[
								2190,
								2201
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/C++/C.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1025.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Compiler/Assembler/assembler.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5424,
						"regions":
						{
						},
						"selection":
						[
							[
								4853,
								4853
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Common/Instruction.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 652,
						"regions":
						{
						},
						"selection":
						[
							[
								499,
								499
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 41.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "tests/If Tests/if test 2.lan",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 102,
						"regions":
						{
						},
						"selection":
						[
							[
								66,
								66
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Interpreter/interpreter.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6204,
						"regions":
						{
						},
						"selection":
						[
							[
								5796,
								5796
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1023.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "CS 498.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2918,
						"regions":
						{
						},
						"selection":
						[
							[
								167,
								167
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "Common/CByteStream/ByteStream.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1194,
						"regions":
						{
						},
						"selection":
						[
							[
								1056,
								1056
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 97.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "Compiler/Lexer_Parser/LangLexer.l",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6064,
						"regions":
						{
						},
						"selection":
						[
							[
								989,
								989
							]
						],
						"settings":
						{
							"syntax": "Packages/Lisp/Lisp.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 392.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 221.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "CS 498.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"lan",
				"Compiler/Lexer_Parser/LangParse.y"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
