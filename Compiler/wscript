import platform
recurseDirs = ["Assembler", "Lexer_Parser", "Common"]

def options(opt):
	opt.load('compiler_c')

	opt.add_option('--mode', action='store', default='debug', help='Compile Mode: release or debug')
	opt.recurse(recurseDirs)

def configure(conf):
	from waflib.Tools.compiler_c import c_compiler
	conf.load('compiler_c')
	if not conf.env.CC:
		conf.fatal('Please install a C compiler')

	if conf.options.mode == 'debug':
		print "Setting up debug build"
		conf.env['CFLAGS'] = ['-g3', '-std=c89']
		conf.define("__LEX_DEBUG__", 1)
	else:
		conf.env['CFLAGS'] = ['-ansi', '-std=c89']

	conf.recurse(recurseDirs)



def build(bld):
	

	from waflib.Build import POST_LAZY
	bld.post_mode = POST_LAZY

	bld.define("___LEX_LIBRARY___", 1)
	
	lemparCopy = bld(
		rule='cp ${SRC} ${TGT}',
		source='Tools/lempar.c',
		target='lempar.c'
		)
	
	#build lemon
	
	lemonBuild = bld.program(
		source='Tools/lemon.c',
		target='lemon')

	
	bld.add_group()

	bld.recurse(recurseDirs)

	
	compilerLibBuild = bld.stlib(features='c', source='compiler.c', target='CompilerLib', includes='. ../Common Common')
	
	bld.add_group()
	

	parserTest = bld.program(
		source='parseTest.c',
		use='CompilerLib LangLib ProgramLib FileUtil',
		target='parserTest',
		includes = '. ../Common Common')

	compilerBuild = bld.program(
		source='CompilerMain.c',
		use='CompilerLib LangLib ProgramLib AssemblerLib InstructionLib ByteStreamLib',
		target='compiler',
		includes = '. ../Common Common')


def test(ctx):
	pass