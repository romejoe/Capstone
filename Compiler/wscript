import platform

def options(opt):
	opt.load('compiler_c')

def configure(conf):
	from waflib.Tools.compiler_c import c_compiler
	conf.load('compiler_c')
	if not conf.env.CC:
		conf.fatal('Please install a C compiler')

	conf.load('flex')
	if not conf.env.FLEX:
		conf.fatal('Please install flex')

	conf.load('y2c', tooldir='.')



def build(bld):

	from waflib.Build import POST_LAZY
	bld.post_mode = POST_LAZY

	bld.define("___LEX_LIBRARY___", 1)
	
	lemparCopy = bld(
		rule='cp ${SRC} ${TGT}',
		source='Tools/lempar.c',
		target='lempar.c'
		)
	
	bld.add_group()
	#build lemon
	
	lemonBuild = bld.program(
		source='Tools/lemon.c',
		target='lemon')

	
	bld.add_group()

	lexerBuild = bld.stlib(features='c', source='LangParse.y LangLexer.l token.c', target='LangLib', includes='.')


	compilerLibBuild = bld.stlib(features='c', source='compiler.c', target='CompilerLib')
	
	bld.add_group()
	#bld.program(target='testcompiler', source='LangParse.y LangLexer.l compiler.c compilerTest.c')

	compilerBuild = bld.program(
	#	features='compilerTest',
		source='compilerTest.c',
		use='CompilerLib LangLib',
		target='testCompiler')


def test(ctx):
	pass


#from waflib import Task
#class compilerTest(Task.Task):
#	color='ORANGE'
# 	run_str="${SRC} ${TGT}"

# from waflib.TaskGen import feature

# @feature('compilerTest')
# def addTest(self):
# 	print "here"
# 	compiler =  self.bld.get_tgen_by_name('testCompiler')
# 	print compiler.__dict__
# 	print self.__dict__
# 	tsk = self.create_task('compilerTest', compiler, None)