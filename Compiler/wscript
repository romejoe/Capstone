import platform

def options(opt):
	opt.load('compiler_c')

def configure(conf):
	
	
	
	from waflib.Tools.compiler_c import c_compiler
	conf.load('compiler_c')
	if not conf.env.CC:
		conf.fatal('Please install a C compiler')

	conf.load('flex')
	if not conf.env.FLEX:
		conf.fatal('Please install flex')

	conf.load('y2c', tooldir='.')



def build(bld):

	from waflib.Build import POST_LAZY
	bld.post_mode = POST_LAZY

	bld.define("___LEX_LIBRARY___", 1)
	
	lemparCopy = bld(
		rule='cp ${SRC} ${TGT}',
		source='Tools/lempar.c',
		target='lempar.c'
		)
	
	bld.add_group()
	#build lemon
	#lemonBuild = bld(
	#	features='c cprogram',
	#	source='Tools/lemon.c',
	#	target='lemon')
	lemonBuild = bld.program(
		source='Tools/lemon.c',
		target='lemon')

	
	
	#lemonExecutable = bld.out_dir + "/Compiler/lemon"
	#if platform.system() == "Windows":
	#	lemonExecutable += ".exe"
	bld.add_group()
	
	#lemonit = bld(rule= lemonExecutable + " ${SRC}", source='Lang.y')
	#bld.program(source='Lang.y')
	#flexit = bld(rule='${FLEX} -o${TGT} ${SRC}', source='Lang.lex', target='Lang.yy.c')
	bld.add_group()
	#bld(rule='echo "done with lemon"')
	#bld(rule='cat ${SRC}', source='Lang.c')
	#bld.add_group()
	#bld(rule='cp ${SRC} ${TGT}', source='Lang.h', target='Lang.h')
	#bld(rule='mv ${SRC} ${TGT}', source='Lang.c', target='Lang.c')
	#bld.add_group()
	lexerBuild = bld.stlib(features='c', source='LangParse.y LangLexer.l token.c', target='LangLib', includes='.')


	compilerLibBuild = bld.stlib(features='c', source='compiler.c', target='CompilerLib')#, use='Lang')
	
	bld.add_group()
	#bld.program(target='testcompiler', source='LangParse.y LangLexer.l compiler.c compilerTest.c')

	compilerBuild = bld.program(
		#features='c',
		source='compilerTest.c',
		use='LangLib CompilerLib',
		target='testCompiler')


def test(ctx):
	pass